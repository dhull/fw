#! /bin/sh

#---------------------------------------------------------------------
#                           chicken and egg                           
#---------------------------------------------------------------------

test -f "${FW_ROOT}/share/fw/sh/fw-find.sh" && fws="${FW_ROOT}/share/fw/sh/fw-find.sh"
test -f "fw/sh/fw-find.sh" && fws="fw/sh/fw-find.sh"
test -f "fw.local/sh/fw-find.sh" && fws="fw.local/sh/fw-find.sh"
test ! -z "$fws" || {
  echo "package/rpm/make-hook: fatal: can't locate fw-find.sh" 1>&2
  exit 1
}

. "$fws"

#---------------------------------------------------------------------
#                              routines                               
#---------------------------------------------------------------------

fw_source "package/rpm/make-hook" "sh/fatal.sh"
fw_source "package/rpm/make-hook" "sh/fw-exec.sh"
fw_source "package/rpm/make-hook" "sh/parse-args.sh"
fw_source "package/rpm/make-hook" "sh/validate-args.sh"

comparescript='
rpm_compare () { 
  perl - "$@" <<'\'EOF_PERL\''
sub rpmvercmp ($$)
{
  my ($a, $b) = @_;

  # This function attempts to follow the C code as closely as possible.
  # http://www.rpm.org/api/4.4.2.2/rpmvercmp_8c-source.html

  if (! defined($a) || ! defined($b)) {
    if (defined($a)) { return 1; }  # $a is defined and $b is not.
    if (defined($b)) { return -1; } # $b is defined and $a is not.
    return 0;			    # Neither $a nor $b is defined.
  }

  if ($a eq $b) { return 0; }

  my $one = $a;
  my $two = $b;
  while (length($one) > 0 && length($two) > 0)
    {
      $one =~ s/^[^[:alnum:]]+//;
      $two =~ s/^[^[:alnum:]]+//;

      if (length($one) == 0 || length($two) == 0) { last; }

      my $isnum;
      my $str1 = $one;
      my $str2 = $two;
      if ($str1 =~ m/^[[:digit:]]/)
	{
	  $str1 =~ m/^([[:digit:]]*)(.*)/ and do { $one = $1; $str1 = $2; };
	  $str2 =~ m/^([[:digit:]]*)(.*)/ and do { $two = $1; $str2 = $2; };
	  $isnum = 1;
	}
      else
	{
	  $str1 =~ m/^([[:alpha:]]*)(.*)/ and do { $one = $1; $str1 = $2; };
	  $str2 =~ m/^([[:alpha:]]*)(.*)/ and do { $two = $1; $str2 = $2; };
	  $isnum = 0;
	}

      if (length($one) == 0) { return -1; } # Should not happen.
      if (length($two) == 0) { return $isnum ? 1 : -1; }

      if ($isnum) {
	$one =~ s/^0+//;
	$two =~ s/^0+//;

	if (length($one) > length($two)) { return 1; }
	if (length($two) > length($one)) { return -1; }
      }

      my $rc = $one cmp $two;
      if ($rc != 0) { return $rc; }

      $one = $str1;
      $two = $str2;
    }

  if (length($one) == 0 && length($two) == 0) { return 0; }

  if (length($one) == 0) { return -1; } else { return 1; }
}

sub rpmevrcmp
  {
    my ($a, $b) = @_;

    my ($ae, $av, $ar) = ($a =~ m{^(?:([^:]*):)?([^-]*)(?:-(.*))?$});
    my ($be, $bv, $br) = ($b =~ m{^(?:([^:]*):)?([^-]*)(?:-(.*))?$});

    my $cmp = rpmvercmp($ae, $be);
    if ($cmp != 0) { return $cmp; }

    $cmp = rpmvercmp($av, $bv);
    if ($cmp != 0) { return $cmp; }

    return rpmvercmp($ar, $br);
}

my %cmp = (
  lt => sub { return rpmevrcmp($_[0], $_[1]) <  0; },
  le => sub { return rpmevrcmp($_[0], $_[1]) <= 0; },
  eq => sub { return rpmevrcmp($_[0], $_[1]) == 0; },
  ne => sub { return rpmevrcmp($_[0], $_[1]) != 0; },
  ge => sub { return rpmevrcmp($_[0], $_[1]) >= 0; },
  gt => sub { return rpmevrcmp($_[0], $_[1]) >  0; },
);

defined(my $cmpfunc = $cmp{$ARGV[1]}) or die "bad arguments";
exit($cmpfunc->($ARGV[0], $ARGV[2]) ? 0 : 1);
EOF_PERL
}
'

make_post_install () {
  cat <<EOD
#! /bin/sh

$comparescript

compare_versions=rpm_compare

canonicalize () {
  perl -e '(\$_) = @ARGV; s/-TEST1\$//; print \$_' -- "\$1"
}

$preamble

operation="\$1"

case "\$operation" in
  configure)
    most_recently_configured_version="\$2"
    canon_most_recently_configured_version="\`canonicalize \"\$most_recently_configured_version\"\`"
    $configure
    ;;
  abort-upgrade)
    new_version="\$2"
    canon_new_version="\`canonicalize \"\$new_version\"\`"
    $abort_upgrade
    ;;
  abort-remove)
    $abort_remove
    ;;
  *)
    ;;
esac

$postamble

exit 0
EOD
}

make_post_remove () {
  cat <<EOD
#! /bin/sh

$comparescript

compare_versions=rpm_compare

case "\$1" in
  upgrade)
    exit 1 # defer to new package's version
    ;;
  *)
    ;;
esac

canonicalize () {
  perl -e '(\$_) = @ARGV; s/-TEST1\$//; print \$_' -- "\$1"
}

$preamble

operation="\$1"

case "\$operation" in
  remove)
    $remove
    ;;
  purge)
    $purge
    ;;
  failed-upgrade)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $upgrade
    ;;
  abort-install)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $abort_install
    ;;
  abort-upgrade)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $abort_upgrade
    ;;
  disappear)
    $remove
    ;;
  *)
    ;;
esac

$postamble

exit 0
EOD
}

make_pre_install () {
  cat <<EOD
#! /bin/sh

$comparescript

compare_versions=rpm_compare

canonicalize () {
  perl -e '(\$_) = @ARGV; s/-TEST1\$//; print \$_' -- "\$1"
}

$preamble

operation="\$1"

case "\$operation" in
  install)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $install
    ;;
  upgrade)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $upgrade
    ;;
  abort-upgrade)
    new_version="\$2"
    canon_new_version="\`canonicalize \"\$new_version\"\`"
    $abort_upgrade
    ;;
  *)
    ;;
esac

$postamble

exit 0
EOD
}

make_pre_remove () {
  cat <<EOD
#! /bin/sh

$comparescript

compare_versions=rpm_compare

case "\$1" in
  upgrade)
    exit 1 # defer to new package's version
    ;;
  *)
    ;;
esac

canonicalize () {
  perl -e '(\$_) = @ARGV; s/-TEST1\$//; print \$_' -- "\$1"
}

$preamble

operation="\$1"

case "\$operation" in
  remove)
    $remove
    ;;
  failed-upgrade)
    old_version="\$2"
    canon_old_version="\`canonicalize \"\$old_version\"\`"
    $upgrade
    ;;
  deconfigure)
    $deconfigure
    ;;
  *)
    ;;
esac

$postamble

exit 0
EOD
}

#---------------------------------------------------------------------
#                                main                                 
#---------------------------------------------------------------------

parse_args "package/rpm/make-hook" "$@"

validate_args "package/rpm/make-hook" "hook" ""

case "$hook" in
  post-install)
    make_post_install
    ;;
  post-remove)
    make_post_remove
    ;;
  pre-install)
    make_pre_install
    ;;
  pre-remove)
    make_pre_remove
    ;;
  *)
    echo "package/rpm/make-hook: warning: unsupported hook '$hook'" 1>&2
    exit 0
esac
