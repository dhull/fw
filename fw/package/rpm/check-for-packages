#! /usr/bin/perl

use File::Basename;

BEGIN {
  unshift @INC, dirname ($0);
};

use FwRpmPackage;
use strict;

#---------------------------------------------------------------------
#                                main                                 
#---------------------------------------------------------------------

my $usage = "package/rpm/check-for-packages: fatal: usage: $0 --arch arch --depends depends --release release --getdeps getdeps\n";

$ARGV[0] eq "--arch" or die $usage;
my $arch = $ARGV[1] or die $usage;
$ARGV[2] eq "--depends" or die $usage;
my $depends = $ARGV[3] or exit 0;       # no dependencies -> automatic win
$ARGV[4] eq "--release" or die $usage;
my $release = $ARGV[5] or die $usage;
$ARGV[6] eq "--getdeps" or die $usage;
my $getdeps= $ARGV[7] or die $usage;

my @packages;
# if getdeps is specified, attempt to use yum to install all the missing
# dependencies.
if ($getdeps eq "yes") {
  my @missings = ();
  my @missing_specs = ();
  my ($state, $virtual) = get_state ();
  # we ignore release in the case we are fetching dependencies, otherwise
  # things stop
  my $alldeps = parse_depends ($state, $virtual, $arch, $depends, "no");
  @packages = @{$alldeps->{"packages"}};
  @missings = @{$alldeps->{"missing"}};
  @missing_specs = @{$alldeps->{"missing_specs"}};
  my $num_missings = scalar @missings;
  if ($num_missings > 0) {
    my %upper_bound_missings = ();
    my @missings_to_install;
    # go through all missing packages, find out the upper bound missings
    foreach my $missing (@missings)
    {
      my@array = split /\s+/, $missing;
      if (scalar @array == 3 and ($array[1] eq "<" or $array[1] eq "<=" ))
      {
        $upper_bound_missings{$array[0]} = 1;
      }
    }

    # go through all missing packages, find out the missings should be put into install command 
    foreach my $missing (@missings)
    {
      my @array = split /\s+/, $missing;
      my $num = scalar @array;
      if ($num == 3) {
        # if the missing also has upper bound missing, do not put it into yum install command
        if (($array[1] eq ">" or $array[1] eq ">=" or $array[1] eq "=") and not defined $upper_bound_missings{$array[0]}) {
          push @missings_to_install, "\"$missing\"";
        } elsif ($array[1] eq "<" or $array[1] eq "<=") {
          push @missings_to_install, "\"$missing\"";
        } else {
          warn "This dependency is ignored while installing: $missing\n";
        }
      } elsif ($num == 1) {
        push @missings_to_install, "$missing";
      } else {
        warn "This dependency is ignored while installing: $missing\n";
      }
    }

    if (scalar @missings_to_install > 0) {
      my $cmd = "sudo yum install -y @missings_to_install";
      warn "ATTEMPTING TO INSTALL DEPS\n\t".join ("\n\t",@missings_to_install)."\n";
      warn "$cmd\n";
      my $results = `$cmd`;
      warn "$results\n";
    }
  }

  if ($num_missings > 0) {
    ($state, $virtual) = get_state ();
    # we ignore release in the case we are fetching dependencies, otherwise
    # things stop
    $alldeps = parse_depends ($state, $virtual, $arch, $depends, "no");
    @packages = @{$alldeps->{"packages"}};
    @missings = @{$alldeps->{"missing"}};
    @missing_specs = @{$alldeps->{"missing_specs"}};
    $num_missings = scalar @missings;
  }
  if ($num_missings > 0) {
    die "UNABLE to install build deps still missing\n\t"
        .join ("\n\t",@missing_specs)."\n";
  }
} else {
  my ($state, $virtual) = get_state ();
  my $alldeps = parse_depends ($state, $virtual, $arch, $depends, $release);
  @packages = @{$alldeps->{"packages"}};
}

print join "\n", @packages;
print "\n";
