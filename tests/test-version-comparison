#! /usr/bin/perl

use strict;
use warnings;

use lib '../fw/package/rpm';
use FwRpmPackage;

my @rpmvercmp_tests = (
  [ '1', '1', 0 ],
  [ '1', '2', -1 ],
  [ '2', '1', 1 ],
  [ '1.0', '1.0', 0 ],
  [ '1.0', '2.0', -1 ],
  [ '2.0', '1.0', 1 ],
  [ '1.0', '1.1', -1 ],
  [ '1.1', '2.0', -1 ],
  [ '10', '1', 1 ],
  [ '1', '10', -1 ],
  [ '9', '10', -1 ],
  [ '9.0', '10.0', -1 ],
  [ '10.9', '10.10', -1 ],
  [ '10.009', '10.010', -1 ],
  [ '1.9.99', '1.10.0', -1 ],
  [ '001', '1', 0 ],
  [ '01', '10', -1 ],
  [ '10', '01', 1 ],
  [ '1a', '1b', -1 ],
  [ '1b', '1a', 1 ],
  [ '1.c', '1/c', 0 ],
  [ '1.c', '1/d', -1 ],
  [ '1', '1a', -1 ],
  [ '1.2.3', '1/2/3', 0 ],
  [ 'a123', 'a23', 1 ],
  [ '1.2.3', '1.1.0', 1 ],
  [ '1.2.3', '1.3.2', -1 ],
  [ '1.a.1', '1.b.1', -1 ],
  [ '1.b.1', '1.b.0', 1 ],
  [ '1.c.1', '1.b.2', 1 ],
  [ 'alpha', 'beta', -1 ],
  [ 'gamma', 'beta', 1 ],
  [ '1.a.2', '1a2', 0 ],
  [ '1.a.2', '1.2', -1 ],
  [ '1.a.2', '1.0.2', -1 ],
  [ '1a2', '1.0.2', -1 ],
  [ '5.0.77', '5.00.77', 0 ],
  [ '5.01.77', '5.2.74', -1 ],
  [ '5.1.77', '5.02.74', -1 ],
  [ '1.0p1', '1.0p2', -1 ],
  [ '1.0p1', '1.0', 1 ],
  [ '2010010201', '2010010202', -1 ],
  [ '1.0010', '1.9', 1 ],
  [ '1.05', '1.5', 0 ],
  [ '2.50', '2.5', 1 ],
  [ 'fc4', 'fc.4', 0 ],
  [ 'FC5', 'fc4', -1 ],
  [ '2a', '2.0', -1 ],
  [ '1.0', '1.fc4', 1 ],
  [ '3.0.0_fc', '3.0.0.fc', 0 ],
);

my $failed = 0;

foreach my $t (@rpmvercmp_tests) {
  my $r = rpmvercmp($t->[0], $t->[1]);
  if ($r != $t->[2]) {
    print "rpmvercmp failed: $t->[0] cmp $t->[1] returned $r, expected $t->[2]\n";
    $failed = 1;
  }
}

my @rpmevrcmp_tests = (
  [ 'x', 'x', 0],
  # revision tests
  [ '1-1', '1-1', 0],
  [ '1-1', '1-2', -1],
  [ '1-2', '1-1', 1],
  [ '1-2', '2-1', -1],
  [ '2-1', '1-2', 1],
  [ '1.0.0-123', '1.0.0-99', 1],
  [ '1.0.0-99a', '1.0.0-99b', -1],
  [ '1.0.0-099b', '1.0.0-99a', 1],
  # epoch tests
  [ '1:x', 'x', 1],
  [ 'x', '1:x', -1],
  [ '1:x', '2:x', -1],
  [ '2:x', '1:x', 1],
  [ '9:x', '10:x', -1],
);

foreach my $t (@rpmevrcmp_tests, @rpmvercmp_tests) {
  my $r = rpmevrcmp($t->[0], $t->[1]);
  if ($r != $t->[2]) {
    print "rpmevrcmp failed: $t->[0] cmp $t->[1] returned $r, expected $t->[2]\n";
    $failed = 1;
  }
}

exit($failed);
